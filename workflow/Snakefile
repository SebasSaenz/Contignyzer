rule assemble:
    input:
        R1=config["reads"]["R1"],
        R2=config["reads"]["R2"]
    output:
        "results/assemblies/{assembler}/kmers_{kmers}/contigs.fasta"
    params:
        kmers_csv=lambda wc: ",".join(wc.kmers.split("-"))
    shell:
        """
        if [ "{wildcards.assembler}" == "megahit" ]; then
            megahit -1 {input.R1} -2 {input.R2} \
                    -o results/assemblies/megahit/kmers_{wildcards.kmers} \
                    --k-list {params.kmers_csv} && \
            cp results/assemblies/megahit/kmers_{wildcards.kmers}/final.contigs.fa {output} ;
        
        elif [ "{wildcards.assembler}" == "metaspades" ]; then
            spades.py -1 {input.R1} -2 {input.R2} \
                    -k {params.kmers_csv} \
                    -o results/assemblies/metaspades/kmers_{wildcards.kmers} && \
            cp results/assemblies/metaspades/kmers_{wildcards.kmers}/contigs.fasta {output} ;
        fi
        """


rule evaluate:
    input:
        contigs="results/assemblies/{assembler}/kmers_{kmers}/contigs.fasta"
    output:
        "results/evaluation/{assembler}_kmers_{kmers}/report.tsv"
    shell:
        """
        metaquast.py {input.contigs} -o results/evaluation/{wildcards.assembler}_kmers_{wildcards.kmers}
        cp results/evaluation/{wildcards.assembler}_kmers_{wildcards.kmers}/report.tsv {output}
        """
rule all:
    input:
        expand("results/evaluation/{assembler}_kmers_{kmers}/report.tsv",
               assembler=config["assemblers"],
               kmers=["-".join(map(str, ks)) for ks in config["kmer_sets"]])

